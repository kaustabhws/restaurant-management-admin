generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Restaurants {
  id                    String                 @id @default(uuid())
  name                  String
  currency              Currency               @default(rupee)
  userId                String
  upiId                 String                 @default("")
  menus                 Menu[]                 @relation("RestaurantToMenu")
  tables                Table[]                @relation("RestaurantToTable")
  orders                Orders[]               @relation("RestaurantToOrder")
  temporders            TempOrders[]           @relation("RestaurantToTempOrder")
  bills                 Bill[]                 @relation("RestaurantToBill")
  customers             Customer[]             @relation("RestaurantToCustimer")
  loyalty               LoyaltyTransaction[]   @relation("RestaurantToLoyaltyTransaction")
  reservations          Reservation[]          @relation("RestaurantToReservation")
  notifications         Notification[]         @relation("RestaurantToNotification")
  inventories           Inventory[]            @relation("RestaurantToInventory")
  campaigns             Campaign[]             @relation("RestaurantToCampaign")
  reviews               Review[]               @relation("RestaurantToReview")
  expenses              Expense[]              @relation("RestaurantToExpense")
  expenseCategories     ExpenseCategory[]      @relation("RestaurantToExpenseCategory")
  inventoryTransactions InventoryTransaction[] @relation("RestaurantToInventoryTransaction")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

enum Currency {
  dollar
  rupee
  euro
  yen
  pound
  ruble
  peso
}

model Inventory {
  id                String          @id @default(uuid())
  name              String
  availableQuantity Int
  unit              String
  minStockThreshold Int
  price             Float
  totalCost         Float
  lastRestockedAt   DateTime?
  resId             String
  restaurant        Restaurants     @relation("RestaurantToInventory", fields: [resId], references: [id])
  menuInventory     MenuInventory[]

  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  InventoryTransaction InventoryTransaction[]

  @@index([resId])
}

model InventoryTransaction {
  id          String      @id @default(uuid())
  resId       String
  restaurant  Restaurants @relation("RestaurantToInventoryTransaction", fields: [resId], references: [id])
  inventoryId String
  inventory   Inventory   @relation(fields: [inventoryId], references: [id])
  quantity    Int
  price       Float
  isExpense   Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([inventoryId])
  @@index([resId])
}

model Menu {
  id             String           @id @default(uuid())
  name           String
  price          Float
  images         Image[]
  resId          String
  restaurant     Restaurants      @relation("RestaurantToMenu", fields: [resId], references: [id])
  orderItems     OrderItems[]
  temporderItems TempOrderItems[]
  ingredients    MenuInventory[]
  reviews        Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([resId])
}

model Image {
  id        String   @id @default(uuid())
  menuId    String
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([menuId])
}

model MenuInventory {
  id           String    @id @default(uuid())
  menuId       String
  inventoryId  String
  quantityUsed Int
  menu         Menu      @relation(fields: [menuId], references: [id])
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([menuId, inventoryId])
  @@index([inventoryId])
}

model Table {
  id          String        @id @default(uuid())
  name        String
  seats       Int
  status      TableStatus   @default(Available)
  resId       String
  restaurant  Restaurants   @relation("RestaurantToTable", fields: [resId], references: [id])
  temporders  TempOrders[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reservation Reservation[]

  @@index([resId])
}

enum TableStatus {
  Available
  Reserved
  Occupied
}

model TempOrders {
  id         String           @id @default(uuid())
  takeawayId String?
  resId      String
  restaurant Restaurants      @relation("RestaurantToTempOrder", fields: [resId], references: [id])
  tableId    String?
  table      Table?           @relation(fields: [tableId], references: [id])
  orderItems TempOrderItems[]
  amount     Float
  isPaid     Boolean
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([resId])
  @@index([tableId])
}

model TempOrderItems {
  id       String     @id @default(uuid())
  orderId  String     @unique
  orders   TempOrders @relation(fields: [orderId], references: [id])
  itemId   String
  menuItem Menu       @relation(fields: [itemId], references: [id])
  quantity Int        @default(0)

  @@index([orderId])
  @@index([itemId])
}

model Orders {
  id           String        @id @default(uuid())
  slNo         String        @unique
  resId        String
  tableNo      String?
  orderType    OrderType
  payMode      String        @default("")
  restaurant   Restaurants   @relation("RestaurantToOrder", fields: [resId], references: [id])
  orderItems   OrderItems[]
  bill         Bill[]
  discount     Float         @default(0)
  discountType DiscountType?
  amount       Float
  isPaid       Boolean
  customerId   String?
  customer     Customer?     @relation(fields: [customerId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([resId])
  @@index([slNo])
  @@index([customerId])
}

enum DiscountType {
  Percentage
  Coupon
}

model OrderItems {
  id       String @id @default(uuid())
  orderId  String
  orders   Orders @relation(fields: [orderId], references: [id])
  itemId   String
  menuItem Menu   @relation(fields: [itemId], references: [id])
  quantity Int    @default(0)

  @@index([orderId])
  @@index([itemId])
}

model Bill {
  id         String      @id @default(uuid())
  resId      String
  restaurant Restaurants @relation("RestaurantToBill", fields: [resId], references: [id])
  orderId    String
  orders     Orders      @relation(fields: [orderId], references: [id])
  itemName   String
  itemId     String
  totalPrice Float
  quantity   Int
  customerId String?
  customer   Customer?   @relation(fields: [customerId], references: [id])

  @@index([orderId])
  @@index([resId])
  @@index([customerId])
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

model Customer {
  id                 String               @id @default(uuid())
  email              String?              @unique
  phone              String?              @unique
  loyaltyPoints      Int
  totalSpent         Float
  orders             Orders[]
  bills              Bill[]
  LoyaltyTransaction LoyaltyTransaction[]
  reviews            Review[]
  resId              String
  restaurant         Restaurants          @relation("RestaurantToCustimer", fields: [resId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([resId])
}

model LoyaltyTransaction {
  id          String          @id @default(uuid())
  resId       String
  restaurant  Restaurants     @relation("RestaurantToLoyaltyTransaction", fields: [resId], references: [id])
  amount      Float
  type        TransactionType
  description String
  customerId  String
  customer    Customer        @relation(fields: [customerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([customerId])
  @@index([resId])
}

enum TransactionType {
  Earned
  Redeemed
  Pending
  Deleted
}

model Reservation {
  id         String      @id @default(uuid())
  resId      String
  restaurant Restaurants @relation("RestaurantToReservation", fields: [resId], references: [id])
  tableId    String
  table      Table       @relation(fields: [tableId], references: [id])
  name       String
  phone      String
  visitors   Int
  status     String      @default("Upcoming")
  date       DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([resId])
  @@index([tableId])
}

enum ReservationStatus {
  Upcoming
  Completed
  Cancelled
}

model Notification {
  id          String             @id @default(uuid())
  resId       String
  restaurant  Restaurants        @relation("RestaurantToNotification", fields: [resId], references: [id])
  message     String
  type        NotificationType
  status      NotificationStatus
  referenceId String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([resId])
}

enum NotificationType {
  Order
  Reservation
  General
}

enum NotificationStatus {
  Unread
  Read
}

model Campaign {
  id             String      @id @default(uuid())
  name           String
  description    String
  code           String      @unique
  startDate      DateTime
  endDate        DateTime
  discount       Float
  maxDiscount    Float
  minOrderAmount Float
  maxUsage       Int
  remainingUsage Int
  resId          String
  restaurant     Restaurants @relation("RestaurantToCampaign", fields: [resId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([resId])
}

model Review {
  id         String      @id @default(uuid())
  resId      String
  restaurant Restaurants @relation("RestaurantToReview", fields: [resId], references: [id])
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  itemId     String
  menuItem   Menu        @relation(fields: [itemId], references: [id])
  orderSlNo  String
  rating     Int
  review     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([resId])
  @@index([itemId])
  @@index([customerId])
}

model Expense {
  id          String          @id @default(cuid())
  categoryId  String
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  description String
  amount      Float
  resId       String
  restaurant  Restaurants     @relation("RestaurantToExpense", fields: [resId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([categoryId])
  @@index([resId])
}

model ExpenseCategory {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  expenses    Expense[]
  resId       String
  restaurant  Restaurants @relation("RestaurantToExpenseCategory", fields: [resId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([resId])
}
