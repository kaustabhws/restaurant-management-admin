generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Restaurants {
  id         String               @id @default(uuid())
  name       String
  userId     String
  menus      Menu[]               @relation("RestaurantToMenu")
  tables     Table[]              @relation("RestaurantToTable")
  orders     Orders[]             @relation("RestaurantToOrder")
  temporders TempOrders[]         @relation("RestaurantToTempOrder")
  bills      Bill[]               @relation("RestaurantToBill")
  customers  Customer[]           @relation("RestaurantToCustimer")
  loyalty    LoyaltyTransaction[] @relation("RestaurantToLoyaltyTransaction")
  employees  Employee[]           @relation("RestaurantToEmployee")
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

model Menu {
  id             String           @id @default(uuid())
  name           String
  price          Float
  resId          String
  restaurant     Restaurants      @relation("RestaurantToMenu", fields: [resId], references: [id])
  orderItems     OrderItems[]
  temporderItems TempOrderItems[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([resId])
}

model Table {
  id         String       @id @default(uuid())
  name       String
  seats      Int
  status     String       @default("Available")
  resId      String
  restaurant Restaurants  @relation("RestaurantToTable", fields: [resId], references: [id])
  temporders TempOrders[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([resId])
}

model TempOrders {
  id         String           @id @default(uuid())
  takeawayId String?
  resId      String
  restaurant Restaurants      @relation("RestaurantToTempOrder", fields: [resId], references: [id])
  tableId    String?
  table      Table?           @relation(fields: [tableId], references: [id])
  orderItems TempOrderItems[]
  amount     Float
  isPaid     Boolean
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([resId])
  @@index([tableId])
}

model TempOrderItems {
  id       String     @id @default(uuid())
  orderId  String
  orders   TempOrders @relation(fields: [orderId], references: [id])
  itemId   String
  menuItem Menu       @relation(fields: [itemId], references: [id])
  quantity Int        @default(0)

  @@index([orderId])
  @@index([itemId])
}

model Orders {
  id         String       @id @default(uuid())
  slNo       String
  resId      String
  tableNo    String?
  orderType  OrderType
  payMode    String       @default("")
  restaurant Restaurants  @relation("RestaurantToOrder", fields: [resId], references: [id])
  orderItems OrderItems[]
  bill       Bill[]
  amount     Float
  isPaid     Boolean
  customerId String?
  customer   Customer?    @relation(fields: [customerId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([resId])
  @@index([slNo])
  @@index([customerId])
}

model OrderItems {
  id       String @id @default(uuid())
  orderId  String
  orders   Orders @relation(fields: [orderId], references: [id])
  itemId   String
  menuItem Menu   @relation(fields: [itemId], references: [id])
  quantity Int    @default(0)

  @@index([orderId])
  @@index([itemId])
}

model Bill {
  id         String      @id @default(uuid())
  resId      String
  restaurant Restaurants @relation("RestaurantToBill", fields: [resId], references: [id])
  orderId    String
  orders     Orders      @relation(fields: [orderId], references: [id])
  itemName   String
  itemId     String
  totalPrice Float
  quantity   Int
  customerId String?
  customer   Customer?   @relation(fields: [customerId], references: [id])

  @@index([orderId])
  @@index([resId])
  @@index([customerId])
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

model Customer {
  id                 String               @id @default(uuid())
  email              String?              @unique
  phone              String?              @unique
  loyaltyPoints      Int
  totalSpent         Float
  orders             Orders[]
  bills              Bill[]
  LoyaltyTransaction LoyaltyTransaction[]
  resId              String
  restaurant         Restaurants          @relation("RestaurantToCustimer", fields: [resId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@index([resId])
}

model LoyaltyTransaction {
  id          String          @id @default(uuid())
  resId       String
  restaurant  Restaurants     @relation("RestaurantToLoyaltyTransaction", fields: [resId], references: [id])
  amount      Float
  type        TransactionType
  description String
  customerId  String
  customer    Customer        @relation(fields: [customerId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([customerId])
  @@index([resId])
}

enum TransactionType {
  Earned
  Redeemed
  Pending
  Deleted
}

model Employee {
  id          String       @id @default(uuid())
  resId       String
  restaurant  Restaurants  @relation("RestaurantToEmployee", fields: [resId], references: [id])
  empId       String       @unique
  name        String
  email       String
  phone       String
  address     String
  startDate   String
  endDate     String?
  jobTitle    String
  shiftType   ShiftType
  salary      Float
  payroll     Payroll[]
  schedules   Schedules?
  bankDetails BankDetails?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([resId])
}

model BankDetails {
  id         String   @id @default(uuid())
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  bankName   String
  bankAccNo  String
  bankIFSC   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([employeeId])
}

model Schedules {
  id         String   @id @default(uuid())
  employeeId String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  startTime  String
  endTime    String
  isDayoff   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([employeeId])
}

model Payroll {
  id            String        @id @default(uuid())
  employeeId    String
  employee      Employee      @relation(fields: [employeeId], references: [id])
  hoursWorked   Float
  overTimeHours Float
  salary        Float
  bonus         Float
  deductions    Float
  netSalary     Float
  status        PayrollStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([employeeId])
}

enum ShiftType {
  FullTime
  PartTime
  Contract
}

enum PayrollStatus {
  Pending
  Processed
  Paid
}
